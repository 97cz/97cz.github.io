<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ajax</title>
      <link href="/2022/09/20/Ajax/"/>
      <url>/2022/09/20/Ajax/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>AJAX &#x3D; Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</p><p>AJAX 最大的优点是在 <code>不重新加载</code> 整个页面的情况下，可以与服务器交换数据并更新部分网页内容。</p><h2 id="JS实现"><a href="#JS实现" class="headerlink" title="JS实现"></a>JS实现</h2><h3 id="创建XHR对象"><a href="#创建XHR对象" class="headerlink" title="创建XHR对象"></a>创建XHR对象</h3><p>Ajax的核心是 <code>XMLHttpRequest对象</code>（XHR），XHR对象是一个javascript对象，为向服务器发送请求和解析服务器响应提供了接口，能够以 <code>异步方式</code> 从服务器获取新数据。</p><p>语法：<code>xmlhttp = new XMLHttpRequest();</code></p><blockquote><p>老版本的 Internet Explorer（IE5 和 IE6）使用 <code>ActiveX</code> 对象。为了应对所有的现代浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，则创建 XMLHttpRequest 对象。如果不支持，则创建 ActiveX 对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlhttp;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)</span><br><span class="line">    <span class="comment">//  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span><br><span class="line">    xmlhttp=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">// IE6, IE5 浏览器执行代码</span></span><br><span class="line">    xmlhttp=<span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="向服务器发送请求"><a href="#向服务器发送请求" class="headerlink" title="向服务器发送请求"></a>向服务器发送请求</h3><p>发送请求使用 <code>XMLHttpRequest对象</code> 的 <code>open()</code>和 <code>send()</code> 方法。</p><p>open(method, url, async)：规定请求的类型、URL以及是否异步处理请求。</p><ul><li>metod：请求的类型，Get或Post；</li><li>url：文件在服务器上的位置，该文件可以是任何类型的文件，例如.txt或.xml；</li><li>async：true（异步）或false（同步）。</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">url = <span class="string">&quot;/1.txt&quot;</span>;</span><br><span class="line"><span class="comment">// 此时能直接得到文本内容。</span></span><br><span class="line"><span class="comment">// 对于不同类型的文件，处理方式不同，例如访问xml，返回的响应数据就需要进行解析。</span></span><br></pre></td></tr></table></figure><p>send(string)：将请求发送到服务器，其中string为POST请求 <code>携带的数据</code>。</p><p>使用Get还是Post：与Post相比，Get更简单也更快，并且在大部分情况下都能用。然而，在以下情况中，请 <code>使用Post请求</code>：</p><ul><li>不愿使用缓存文件（更新服务器上的文件或数据库）</li><li>向服务器发送大量数据（Post请求没有数据量限制）</li><li>发送包含未知字符的用户输入时，Post比Get更稳定也更可靠</li></ul><p>GET请求示例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单的get请求</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/try/ajax/demo_get.php&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在上面的例子中，得到的是缓存的结果。为了避免这种情况，给URL添加一个唯一的ID</span></span><br><span class="line">xmhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/try/ajax/demo_get.php?t=&quot;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>(),<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带数据的get请求</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/try/ajax/demo_get2.php?fname=Henry&amp;lname=Ford&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><p>Post请求示例：需要传递数据时，使用 <code>setRequestHeader()</code> 来添加 <code>HTTP头</code>，然后在 send() 方法中传递要发送的数据。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单post请求</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;/try/ajax/demo_post.php&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带数据的post请求</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;/try/ajax/demo_post2.php&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>(<span class="string">&quot;fname=Henry&amp;lname=Ford&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>setRequestHeader(header,value)：用于给请求添加 HTTP 头，Post请求携带数据时必须使用。其中header：规定头的名称；value：规定头的值。</p></blockquote><h3 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h3><p>获得来自服务器的响应，可以使用 <code>XMLHttpRequest对象</code>的 <code>responseText</code> 或 <code>responseXML</code> 属性。</p><ul><li>responseText：获得字符串形式的响应数据。</li><li>responseXML：获得 XML 形式的响应数据。</li></ul><p>当请求被发送到服务器时，需要执行一些基于响应的任务。<code>readyState属性</code> 存有 XMLHttpRequest 的状态信息，每当 readyState 改变时，就会触发 <code>onreadystatechange事件</code>。</p><ul><li>0：请求未初始化（还没有调用 open()）。</li><li>1：请求已经建立，但是还没有发送（还没有调用 send()）。</li><li>2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）。</li><li>3：请求在处理中，通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成。</li><li>4：响应已完成，可以获取并使用服务器的响应了。</li></ul><p>在 onreadystatechange 事件中，规定当服务器响应已做好被处理的准备时所执行的任务。当 <code>readyState 等于4且状态为200时</code>，表示响应已就绪。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span>==<span class="number">200</span>)        </span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">innerHTML</span>=xmlhttp.<span class="property">responseText</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>onreadystatechange 事件被触发4 次，分别是： 0-1、1-2、2-3、3-4，对应着 readyState 的每个变化。</p><p><code>status</code> 存在两种状态：<code>200</code> 表示成功；<code>404</code> 表示失败。</p></blockquote><h3 id="整合示例"><a href="#整合示例" class="headerlink" title="整合示例"></a>整合示例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control mb-2&quot;</span> <span class="attr">id</span>=<span class="string">&quot;uname&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control mb-2&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control mb-2&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;login()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        username = $(<span class="string">&quot;#uname&quot;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">        password = $(<span class="string">&quot;#pwd&quot;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">        url = <span class="string">&quot;/login?username=&quot;</span> + username + <span class="string">&quot;&amp;password=&quot;</span> + password</span></span><br><span class="line"><span class="language-javascript">        xmlhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">        xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(xmlhttp.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span>==<span class="number">200</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(xmlhttp.<span class="property">responseText</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,url,<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">        xmlhttp.<span class="title function_">send</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>异步 - True 或 False</p><p>XMLHttpRequest 对象如果要用于 AJAX 的话，其 open() 方法的 <code>async参数</code> 必须设置为 <code>true</code>。通过 AJAX，JavaScript 无需等待服务器的响应，而是</p><ul><li>在等待服务器响应时执行其他脚本</li><li>当响应就绪后对响应进行处理</li></ul><p>当 <code>async=true</code> 时，需要规定在响应处于 onreadystatechange 事件中的 <code>就绪状态</code> 时执行的函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span>==<span class="number">200</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">innerHTML</span>=xmlhttp.<span class="property">responseText</span>;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/try/ajax/ajax_info.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><p>当 <code>async=false</code>，JavaScript 会等到服务器响应就绪才继续执行。如果服务器繁忙或缓慢，应用程序会挂起或停止。此时<code>不需要onreadystatechang函数</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/try/ajax/ajax_info.txt&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">innerHTML</span>=xmlhttp.<span class="property">responseText</span>;</span><br></pre></td></tr></table></figure><h2 id="jQuery实现"><a href="#jQuery实现" class="headerlink" title="jQuery实现"></a>jQuery实现</h2><p>jQuery 提供多个与 AJAX 有关的方法。通过 jQuery AJAX 方法，能够使用 Get 或 Post 从远程服务器上请求文本、HTML、XML 或 JSON，同时能够把这些外部数据直接载入网页的被选元素中。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;a1()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">a1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 可直接传递参数：$.post(url, data, success)。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 其中data可省略，例如：$.post(&quot;/a2&quot;,function(data)&#123;&#125;)</span></span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">post</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 请求地址</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>:<span class="string">&quot;/a1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 传递数据，键值对形式，逗号分隔</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;<span class="string">&quot;name&quot;</span>:$(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>()&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 成功后执行回调函数，此时data为后端返回的数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(data)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 失败后执行的回调函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">error</span>:<span class="keyword">function</span> (<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以使用 <code>$.get()</code> 或 <code>$.ajax()</code>。</p><blockquote><p>$.get() 及 $.post() 在 <code>内部调用</code> 了 $.ajax()。</p></blockquote><h2 id="Vue实现"><a href="#Vue实现" class="headerlink" title="Vue实现"></a>Vue实现</h2><p>Vue使用 <code>axios</code> 来完成 ajax 请求。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;script src=&quot;https://cdn.staticfile.org/axios/0.18.0/axios.min.js&quot;&gt;&lt;/script&gt;--&gt;</span></span><br></pre></td></tr></table></figure><p>Get请求示例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;https://www.runoob.com/try/ajax/demo_axios_post.php&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> (<span class="variable language_">this</span>.<span class="property">info</span> = response))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123; </span><br><span class="line">        <span class="comment">// 请求失败处理</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 携带数据，直接拼接在后面</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user?ID=12345&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 也可通过params设置参数，参数名有无引号均可</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">params</span>: &#123;</span><br><span class="line"><span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Post请求示例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">    axios.<span class="title function_">post</span>(<span class="string">&#x27;https://www.runoob.com/try/ajax/demo_axios_post.php&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> (<span class="variable language_">this</span>.<span class="property">info</span> = response))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 携带数据，此方式存在问题，需要使用下一种方式</span></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,    </span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 携带数据，能正常接收</span></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;qs&#x27;</span>);</span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/foo&#x27;</span>, qs.<span class="title function_">stringify</span>(&#123; <span class="string">&#x27;bar&#x27;</span>: <span class="number">123</span> &#125;));</span><br></pre></td></tr></table></figure><blockquote><p>注意：第一种携带数据的post请求，在传递参数时 <code>存在问题</code>。前端能传递参数，但 <code>后端接收不到</code>，此时需要引入 <code>qs</code>。</p><p>更多解决 <code>post传参问题</code> 的方法可参考：<a href="https://blog.csdn.net/lihchweb/article/details/79884134">https://blog.csdn.net/lihchweb/article/details/79884134</a></p></blockquote><p>Vue的异步加载也可以使用 <code>vue-resource</code> 来完成。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue-resource/1.5.1/vue-resource.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Get请求示例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line"><span class="attr">get</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">// 发送get请求</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/try/ajax/ajax_info.txt&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(res);    </span><br><span class="line">        &#125;,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败处理&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 携带数据</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;get.php&#x27;</span>,&#123;<span class="attr">params</span>:&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>)&#123;...&#125;</span><br></pre></td></tr></table></figure><p>Post请求示例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">post</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&#x27;/try/ajax/demo_test_post.php&#x27;</span>,&#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>&#125;,&#123;<span class="attr">emulateJSON</span>:<span class="literal">true</span>&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(res.<span class="property">body</span>);    </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>post请求发送数据到后端，需要第三个参数 <code>&#123;emulateJSON:true&#125;</code>。</p><p>emulateJSON 的作用： 如果Web服务器无法处理编码为 <code>application/json</code> 的请求，你可以启用 emulateJSON 选项。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo与Butterfly</title>
      <link href="/2022/09/16/hexo%E4%B8%8EButterfly/"/>
      <url>/2022/09/16/hexo%E4%B8%8EButterfly/</url>
      
        <content type="html"><![CDATA[<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在 <code>Blogroot</code> 路径下<code>右箭</code> -&gt; <code>Git Bash Here</code>，输入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><blockquote><p>升级方法：在 <code>Blogroot</code> 下输入 <code>git pull</code>。升级完成后，可到 Github 的 <a href="https://github.com/jerryc127/hexo-theme-butterfly/releases">Releases</a> 界面或者 <a href="https://butterfly.js.org/posts/198a4240/">更新日志</a> 界面查看新版的更新内容，根据实际情况更新配置。</p></blockquote><h3 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h3><p>修改 <code>Blogroot</code> 下的 <code>_config.yml</code>，把主题改为 <code>butterfly</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>如果没有 pug 以及 stylus 的渲染器，请下载安装：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br><span class="line"><span class="comment"># yarn add hexo-renderer-pug hexo-renderer-stylus</span></span><br></pre></td></tr></table></figure><h3 id="安装建议"><a href="#安装建议" class="headerlink" title="安装建议"></a>安装建议</h3><p>在 <code>Blogroot</code> 目录下创建一个 <code>_config.butterfly.yml</code>，并把 <code>Blogroot\themes\butterfly</code> 路径下的 <code>_config.yml</code> 内容复制到 <code>_config.butterfly.yml</code>中。以后只需在 <code>_config.butterfly.yml</code> 中进行配置即可，此时配置主题的 <code>_config.yml</code> 将无效。</p><p>Hexo会自动合并主题中的 <code>_config.yml</code> 和 <code>_config.butterfly.yml</code> 里的配置，如果存在同名配置，会使用 <code>_config.butterfly.yml</code> 的配置，其优先度较高。</p><blockquote><p>注意：不要把 <code>Blogtoor/_config.yml</code> 删除。</p></blockquote><h2 id="修改过程"><a href="#修改过程" class="headerlink" title="修改过程"></a>修改过程</h2><h3 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h3><p>修改 <code>Blogroot\_config.yml</code>，默认语言为 <code>en</code>，主题支持三种语言：</p><ul><li>default(en)</li><li>zh-CN (简体中文)</li><li>zh-TW (繁体中文)</li></ul><blockquote><p>注意：可通过按钮进行简繁切换。</p></blockquote><h3 id="网站资料"><a href="#网站资料" class="headerlink" title="网站资料"></a>网站资料</h3><p>可在<code>Blogroot\_config.yml</code> 中修改网站资料，包括标题、副标题、关键字、作者等。</p><h3 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h3><p>修改 <code>Blogroot\_config.butterfly.yml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/img/avatar.png</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span> <span class="comment"># 头像会一直转圈</span></span><br></pre></td></tr></table></figure><h3 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h3><p>修改 <code>Blogroot\_config.butterfly.yml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">Archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">Tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">Categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">List||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">    <span class="attr">Music:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="attr">Movie:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="attr">Link:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="attr">About:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><p>格式：必须是 <code>xxx: /xxx/[ || 图标名]</code></p><p>子目录默认展开，可添加 <code>hide</code> 进行隐藏</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">List||fas</span> <span class="string">fa-list||hide:</span></span><br><span class="line">  <span class="attr">Music:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">  <span class="attr">Movie:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br></pre></td></tr></table></figure><h3 id="侧边栏设置"><a href="#侧边栏设置" class="headerlink" title="侧边栏设置"></a>侧边栏设置</h3><p>可自行决定哪个项目需要显示、显示位置，也可以设置不显示侧边栏。</p><p>修改 <code>Blogroot\_config.butterfly.yml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># 手机页面（ 显示宽度 &lt; 768px ）是否显示aside内容</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span> <span class="comment"># left or right</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">archive:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">category:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">card_author:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">description:</span></span><br><span class="line">    <span class="attr">button:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">Github</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/jerryc127/hexo-theme-butterfly</span></span><br><span class="line">  <span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">my</span> <span class="string">Blog</span></span><br><span class="line">  <span class="attr">card_recent_post:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">5</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort:</span> <span class="string">date</span> <span class="comment"># date or updated</span></span><br><span class="line">  <span class="attr">card_categories:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">expand:</span> <span class="string">none</span> <span class="comment"># none/true/false</span></span><br><span class="line">  <span class="attr">card_tags:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">40</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">color:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">card_archives:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">monthly</span> <span class="comment"># yearly or monthly</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">MMMM</span> <span class="string">YYYY</span> <span class="comment"># eg: YYYY年MM月</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">  <span class="attr">card_webinfo:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">post_count:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">last_push_date:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>侧边栏还可添加 <code>访问人数</code>、<code>运行时间</code>、<code>最新评论</code> 等栏目，同时可添加 <code>自定义栏目</code>。</p></blockquote><h3 id="代码相关"><a href="#代码相关" class="headerlink" title="代码相关"></a>代码相关</h3><p>修改 <code>Blogroot\_config.butterfly.yml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码高亮主题，支持6种样式：dark/pale night/light/ocean/mac/mac light</span></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">light</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码复制按钮</span></span><br><span class="line"><span class="attr">highlight_copy:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码框展开或关闭：true代码框关闭；false代码框展开</span></span><br><span class="line"><span class="comment"># 也可以在post/page页对应的markdown文件front-matter添加highlight_shrink来独立配置</span></span><br><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码高度限制：超出的部分会隐藏，单位为px，直接添加数据即可</span></span><br><span class="line"><span class="comment"># 实际限制高度为 highlight_height_limit + 30 px ，多增加 30px 限制，目的是避免代码高度只超出highlight_height_limit 一点时，出现展开按钮，展开没内容。</span></span><br><span class="line"><span class="attr">highlight_height_limit:</span> <span class="literal">false</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码换行：取消横向滚动条</span></span><br><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>对于代码换行，当使用 <code>highlight</code> 渲染，需要找到 <code>Blogroot\_config.yml</code>，将<code>line_number</code> 改成 <code>false</code>：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span> <span class="comment"># &lt;- 修改此处</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="复制相关配置"><a href="#复制相关配置" class="headerlink" title="复制相关配置"></a>复制相关配置</h3><p>配置网站是否可以复制、复制的内容是否添加版权信息</p><p>修改 <code>Blogroot\_config.butterfly.yml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">copy:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">copyright:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit_count:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>enable</td><td>是否开启网站复制权限</td></tr><tr><td>copyright</td><td>复制的内容后面加上版权信息</td></tr><tr><td>enable</td><td>是否开启复制版权信息添加</td></tr><tr><td>limit_count</td><td>字数限制，当复制文字大于这个字数限制时，将在复制的内容后面加上版权信息</td></tr></tbody></table><h3 id="图片描述"><a href="#图片描述" class="headerlink" title="图片描述"></a>图片描述</h3><p>可开启图片描述文字显示，优先显示图片的 title 属性，然后是 alt 属性</p><p>修改 <code>Blogroot\_config.butterfly.yml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">photofigcaption:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="右下角按钮"><a href="#右下角按钮" class="headerlink" title="右下角按钮"></a>右下角按钮</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简繁转换</span></span><br><span class="line"><span class="attr">translate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 夜间模式</span></span><br><span class="line"><span class="comment"># dark mode</span></span><br><span class="line"><span class="attr">darkmode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">autoChangeMode:</span> <span class="literal">false</span> <span class="comment"># 自动切换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 阅读模式：去掉除文章外的内容，只会出现在文章页面</span></span><br><span class="line"><span class="attr">readmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="底部设置"><a href="#底部设置" class="headerlink" title="底部设置"></a>底部设置</h3><p>修改 <code>Blogroot\_config.butterfly.yml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 博客年份：起始时间~现在</span></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2018</span> <span class="comment"># 站点起始时间</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 页脚自定义文本，支持 HTML。</span></span><br><span class="line"><span class="attr">custom_text:</span> <span class="string">&lt;p</span> <span class="string">style=&quot;letter-spacing:2px;&quot;&gt;平明拂剑朝天去，薄暮垂鞭醉酒归！&lt;p&gt;</span></span><br><span class="line"><span class="comment"># ICP也可以写在custom_text里</span></span><br><span class="line"><span class="attr">custom_text:</span> <span class="string">&lt;a</span> <span class="string">href=&quot;icp链接&quot;&gt;&lt;img</span> <span class="string">class=&quot;icp-icon&quot;</span> <span class="string">src=&quot;icp图片&quot;&gt;&lt;span&gt;备案号：xxxxxx&lt;/span&gt;&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h3 id="主页文章节选"><a href="#主页文章节选" class="headerlink" title="主页文章节选"></a>主页文章节选</h3><p>在 <code>butterfly</code> 里，有四种可供选择：</p><ul><li>description： 只显示description（其在 <code>front-matter</code> 里添加）</li><li>both： 优先选择description，如果没有配置description，则显示自动节选的内容</li><li>auto_excerpt：只显示自动节选</li><li>false： 不显示文章内容</li></ul><p>修改 <code>Blogroot\_config.butterfly.yml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span> <span class="comment"># if you set method to 2 or 3, the length need to config</span></span><br></pre></td></tr></table></figure><h3 id="顶部图——"><a href="#顶部图——" class="headerlink" title="顶部图——"></a>顶部图——</h3><h3 id="标签外挂——"><a href="#标签外挂——" class="headerlink" title="标签外挂——"></a>标签外挂——</h3><h3 id="文章设置"><a href="#文章设置" class="headerlink" title="文章设置"></a>文章设置</h3><h4 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h4><p><code>hexo-generator-index</code> 从 2.0.0 开始，已经支持文章置顶功能。可以直接在文章的 <code>front-matter</code> 区域里添加 <code>sticky: 1</code> 属性来把这篇文章置顶。数值越大，置顶的优先级越大。</p><h4 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h4><p>文章封面可在 <code>Front-matter</code> 添加 <code>cover</code>，并填上要显示的图片地址。如果不配置cover，则显示默认的cover。如果不想在首页显示cover，可以设置为 <code>false</code>。</p><p>修改 <code>Blogroot\_config.butterfly.yml</code>中的默认 <code>cover</code>配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># 是否显示文章封面</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 封面显示的位置</span></span><br><span class="line">  <span class="comment"># 三个值可配置 left , right , both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment"># 当没有设置cover时，默认的封面显示</span></span><br><span class="line">  <span class="comment"># 当配置多张图片时,会随机选择一张作为cover.此时写法应为</span></span><br><span class="line">  <span class="attr">default_cover:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">图片地址</span></span><br></pre></td></tr></table></figure><h4 id="文章页设置"><a href="#文章页设置" class="headerlink" title="文章页设置"></a>文章页设置</h4><p>修改 <code>Blogroot\_config.butterfly.yml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示文章的相关信息</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">page:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># 主页文章日期是创建日或者更新日或都显示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">relative</span> <span class="comment"># 显示日期还是相对日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># 主页是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># 主页是否显示标籤</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># 显示描述性文字</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># 文章页日期是创建日或者更新日或都显示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">relative</span> <span class="comment"># 显示日期还是相对日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># 文章页是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># 文章页是否显示标籤</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># 显示描述性文字</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 文章版权</span></span><br><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">decode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">author_href:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span></span><br><span class="line">  <span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 文章打赏</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章目录，可通过front-matter进行配置</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">expand:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">style_simple:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关文章，根据文章tags的比重来推荐</span></span><br><span class="line"><span class="attr">related_post:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span> <span class="comment"># 显示推荐文章数目</span></span><br><span class="line">  <span class="attr">date_type:</span> <span class="string">created</span> <span class="comment"># 文章日期显示创建日或者更新日</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 文章锚点 </span></span><br><span class="line"><span class="comment"># 开启文章锚点后，当文章页进行滚动时，文章链接会根据标题ID进行替换</span></span><br><span class="line"><span class="comment"># 每替换一次，会留下一个歷史记录。所以如果一篇文章有很多锚点的话，网页的歷史记录会很多。</span></span><br><span class="line"><span class="attr">anchor:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章过期提醒，以更新时间为基准，提醒信息为message_prev + limit_day + message_next</span></span><br><span class="line"><span class="attr">noticeOutdate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span> <span class="comment"># style: simple/flat</span></span><br><span class="line">  <span class="attr">limit_day:</span> <span class="number">365</span> <span class="comment"># 距离更新时间多少天才显示文章过期提醒</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">message_prev:</span> <span class="string">It</span> <span class="string">has</span> <span class="string">been</span></span><br><span class="line">  <span class="attr">message_next:</span> <span class="string">days</span> <span class="string">since</span> <span class="string">the</span> <span class="string">last</span> <span class="string">update,</span> <span class="string">the</span> <span class="string">content</span> <span class="string">of</span> <span class="string">the</span> <span class="string">article</span> <span class="string">may</span> <span class="string">be</span> <span class="string">outdated.</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 文章编辑按钮：在文章标题旁边显示一个编辑按钮，点击会跳转到对应的链接去。</span></span><br><span class="line"><span class="attr">post_edit:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 文章分页</span></span><br><span class="line"><span class="comment"># value: 1 || 2 || false</span></span><br><span class="line"><span class="attr">post_pagination:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>主题会优先判断文章的 <code>Front-matter</code> 是否有配置，如有，则以Front-matter的配置为准。否则，以主题配置文件中的配置为准。</p><p>以下内容针对 <code>文章版权</code> 部分</p><p>由于 <code>Hexo 4.1</code> 开始，默认对网址进行解码，以至于如果是中文网址，会被解码，可设置 <code>decode: true</code> 来显示中文网址。</p><p>如果有文章不需要显示版权，可以在文章 <code>Front-matter</code> 单独设置。</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">copyright: false</span><br></pre></td></tr></table></figure><p>从 <code>3.0.0</code> 开始，支持对单独文章设置版权信息，可以在文章 <code>Front-matter</code> 单独设置。</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">copyright<span class="emphasis">_author: xxxx</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href: https://xxxxxx.com</span></span><br><span class="line"><span class="emphasis">copyright_</span>url: https://xxxxxx.com</span><br><span class="line">copyright<span class="emphasis">_info: 此文章版权归xxxxx所有，如有转载，请註明来自原作者</span></span><br></pre></td></tr></table></figure><p>以下内容针对 <code>文章目录</code> 部分</p><table><thead><tr><th>属性</th><th>解释</th></tr></thead><tbody><tr><td>post</td><td>文章页是否显示 TOC</td></tr><tr><td>page</td><td>普通页面是否显示 TOC</td></tr><tr><td>number</td><td>是否显示章节数</td></tr><tr><td>expand</td><td>是否展开 TOC</td></tr><tr><td>style_simple</td><td>简洁模式（侧边栏只显示 TOC, 只对文章页有效 ）</td></tr></tbody></table><p>以下部分针对 <code>文章分页</code> 部分</p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>post_pagination: false</td><td>关闭分页按钮</td></tr><tr><td>post_pagination: 1</td><td>下一篇显示的是旧文章</td></tr><tr><td>post_pagination: 2</td><td>下一篇显示的是新文章</td></tr></tbody></table><h3 id="Fornt-matter"><a href="#Fornt-matter" class="headerlink" title="Fornt-matter"></a>Fornt-matter</h3><p>Front-matter 是 markdown 文件最上方以 <code>---</code> 分隔的区域，用于指定个别文章的变数。</p><ul><li>Page Front-matter 用于 <code>页面</code> 配置</li><li>Post Front-matter 用于 <code>文章页</code> 配置</li></ul><h4 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aside:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">写法</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">title</td><td align="left">【必需】页面标题</td></tr><tr><td align="left">data</td><td align="left">【必需】页面创建日期</td></tr><tr><td align="left">type</td><td align="left">【必需】标签、分类和友情链接三个页面需要配置</td></tr><tr><td align="left">updated</td><td align="left">【可选】页面更新日期</td></tr><tr><td align="left">description</td><td align="left">【可选】页面描述</td></tr><tr><td align="left">keywords</td><td align="left">【可选】页面关键字</td></tr><tr><td align="left">comments</td><td align="left">【可选】显示页面评论模块(默认 true)</td></tr><tr><td align="left">top_img</td><td align="left">【可选】页面顶部图片</td></tr><tr><td align="left">mathjax</td><td align="left">【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td align="left">katex</td><td align="left">【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td align="left">aside</td><td align="left">【可选】显示侧边栏 (默认 true)</td></tr><tr><td align="left">aplayer</td><td align="left">【可选】在需要的页面加载aplayer的js和css</td></tr><tr><td align="left">highlight_shrink</td><td align="left">【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td></tr></tbody></table><h4 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">comments:</span></span><br><span class="line"><span class="emphasis">cover:</span></span><br><span class="line"><span class="emphasis">toc:</span></span><br><span class="line"><span class="emphasis">toc_</span>number:</span><br><span class="line">toc<span class="emphasis">_style_</span>simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright<span class="emphasis">_author:</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href:</span></span><br><span class="line"><span class="emphasis">copyright_</span>url:</span><br><span class="line">copyright<span class="emphasis">_info:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line"><span class="section">aside:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标签</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>toc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的 <code>文章作者</code></td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的 <code>文章作者</code> 链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的 <code>文章连结</code> 链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的 <code>版权声明</code> 文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table><h3 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h3><p>主题内置了一个简单的404页面，可在设置中开启。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&quot;页面没有找到&quot;</span></span><br><span class="line">  <span class="attr">background:</span> </span><br></pre></td></tr></table></figure><blockquote><p>注意：本地预览时，访问出错的网站是不会跳到404页面的。如需本地预览404页面，可访问 <a href="http://localhost:4000/404.html">http://localhost:4000/404.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫笔记</title>
      <link href="/2022/09/15/python%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/09/15/python%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>网络爬虫即根据 URL 获取网页的信息。安装使用到的库：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br><span class="line">pip install beautifulsoup4</span><br><span class="line">pip install lxml</span><br></pre></td></tr></table></figure><blockquote><p>步骤：发起请求 -&gt; 解析数据 -&gt; 保存数据</p><p>Beautiful Soup中文文档：<a href="https://beautifulsoup.readthedocs.io/zh_CN/latest/">https://beautifulsoup.readthedocs.io/zh_CN/latest/</a></p></blockquote><p><code>requests</code> 的使用：基础方法如下</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>requests.request()</td><td>构造—个请求，支撑以下各方法的基础方法</td></tr><tr><td>requests.get()</td><td>获取HTML网页的主要方法，对应于HTTP的GET</td></tr><tr><td>requests.head()</td><td>获取HTML网页头信息的方法，对应于HTTP的HEAD</td></tr><tr><td>requests.post()</td><td>向HTML网页提交POST请求的方法，对应于HTTP的POST</td></tr><tr><td>requests.put()</td><td>向HTML网页提交PUT请求的方法，对应于HTTP的PUT</td></tr><tr><td>requests.patch()</td><td>向HTML网页提交局部修改请求，对应于HTTP的PATCH</td></tr><tr><td>requests.delete()</td><td>向HTML页面提交删除请求，对应于HTTP的DELETE</td></tr></tbody></table><p>其中最常用的是 <code>requests.get()</code> 方法，它用于向服务器发起 GET 请求来获取数据。该方法需要一个参数 <code>url</code> ，表示爬取的对象。示例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 爬取百度翻译</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    target = <span class="string">&quot;http://fanyi.baidu.com/&quot;</span></span><br><span class="line">    req = requests.get(url = target)</span><br><span class="line">    req.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(req.text)</span><br></pre></td></tr></table></figure><h2 id="实例：爬取小说"><a href="#实例：爬取小说" class="headerlink" title="实例：爬取小说"></a>实例：爬取小说</h2><h3 id="爬取网页内容"><a href="#爬取网页内容" class="headerlink" title="爬取网页内容"></a>爬取网页内容</h3><p>使用 <code>Beautiful Soup</code> 提取正文内容并清洗数据，得到章节内容。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 网址对应小说某一章内容</span></span><br><span class="line">    target = <span class="string">&#x27;http://book.zongheng.com/chapter/672340/36898237.html&#x27;</span></span><br><span class="line">    req = requests.get(url = target)</span><br><span class="line">    req.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    html = req.text</span><br><span class="line">    <span class="comment"># 提取数据</span></span><br><span class="line">    bs = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    texts = bs.find(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;content&#x27;</span>&#125;)</span><br><span class="line">    <span class="comment"># 此处写成print(texts.text.strip())即可</span></span><br><span class="line">    <span class="built_in">print</span>(texts.text.strip().split(<span class="string">&#x27;\xa0&#x27;</span>*<span class="number">4</span>))</span><br></pre></td></tr></table></figure><blockquote><p>解释：texts.text方法提取所有文字，strip方法去掉回车，split方法根据’\xa0’切分数据，此处有4个空格，因此’\xa0’*4（\xa0是不间断空白符<code>&amp;nbsp;</code>），即去掉多余的空格。</p><p>也可根据属性来查找元素：<code>html.find(attrs = &#123;&#39;class&#39;:&#39;class属性值&#39;, &#39;id&#39;:&#39;id属性值&#39;&#125;)</code></p></blockquote><h3 id="获取章节链接及章节名"><a href="#获取章节链接及章节名" class="headerlink" title="获取章节链接及章节名"></a>获取章节链接及章节名</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">server = <span class="string">&#x27;https://m.31xiaoshuo.com&#x27;</span></span><br><span class="line">target = <span class="string">&#x27;https://m.31xiaoshuo.com/12/12970/index.htm&#x27;</span></span><br><span class="line">req = requests.get(url = target)</span><br><span class="line">req.encoding = req.apparent_encoding</span><br><span class="line">bs = BeautifulSoup(req.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取章节列表</span></span><br><span class="line">chapters = bs.find(<span class="string">&#x27;ul&#x27;</span>,&#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;am-list-striped&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># 获取章节列表中所有章节链接对应的a标签</span></span><br><span class="line">chapters = chapters.find_all(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># 遍历</span></span><br><span class="line"><span class="keyword">for</span> chapter <span class="keyword">in</span> chapters:</span><br><span class="line">    <span class="comment"># 获取a标签中的章节地址，需要补充前面的部分</span></span><br><span class="line">    url = server + chapter.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获取章节名</span></span><br><span class="line">    name = chapter.string</span><br><span class="line">    <span class="built_in">print</span>(url+<span class="string">&#x27; &#x27;</span>+ name)</span><br></pre></td></tr></table></figure><h3 id="整合代码"><a href="#整合代码" class="headerlink" title="整合代码"></a>整合代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">target</span>):</span><br><span class="line">    req = requests.get(url = target)</span><br><span class="line">    req.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    bs = BeautifulSoup(req.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    texts = bs.find(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">&#x27;content&#x27;</span>&#125;)</span><br><span class="line">    content = texts.text.strip().split(<span class="string">&#x27;\xa0&#x27;</span>*<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server = <span class="string">&#x27;https://www.biqupai.com&#x27;</span></span><br><span class="line">    book_name = <span class="string">&#x27;全球高武.txt&#x27;</span></span><br><span class="line">    target = <span class="string">&#x27;https://www.biqupai.com/81_81336/&#x27;</span></span><br><span class="line">    req = requests.get(url = target)</span><br><span class="line">    req.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    bs = BeautifulSoup(req.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    chapters = bs.find(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">&#x27;list&#x27;</span>&#125;)</span><br><span class="line">    chapters = chapters.find_all(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="comment"># 使用tqdm显示下载进度</span></span><br><span class="line">    <span class="keyword">for</span> chapter <span class="keyword">in</span> tqdm(chapters):</span><br><span class="line">        chapter_name = chapter.string</span><br><span class="line">        url = server + chapter.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">        <span class="comment"># 获取章节内容</span></span><br><span class="line">        content = get_content(url)</span><br><span class="line">        <span class="comment"># 写入文件，追加写模式，文件不存在则创建</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(book_name,<span class="string">&#x27;a&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(chapter_name)</span><br><span class="line">            f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            f.write(<span class="string">&#x27;\n&#x27;</span>.join(content))</span><br><span class="line">            f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="实例：爬取漫画"><a href="#实例：爬取漫画" class="headerlink" title="实例：爬取漫画"></a>实例：爬取漫画</h2><h3 id="获取章节名和章节链接"><a href="#获取章节名和章节链接" class="headerlink" title="获取章节名和章节链接"></a>获取章节名和章节链接</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    target = <span class="string">&#x27;https://www.dmzj.com/info/yaoshenji.html&#x27;</span></span><br><span class="line">    req = requests.get(url = target)</span><br><span class="line">    req.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    bs = BeautifulSoup(req.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    list_con_li = bs.find(<span class="string">&#x27;ul&#x27;</span>,&#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;list_con_li&#x27;</span>&#125;)</span><br><span class="line">    comic_list = list_con_li.find_all(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="comment"># 两个列表分别存放章节名和章节链接</span></span><br><span class="line">    chapter_names = []</span><br><span class="line">    chapter_urls = []   </span><br><span class="line">    <span class="keyword">for</span> comic <span class="keyword">in</span> comic_list:</span><br><span class="line">        href = comic.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">        <span class="comment"># 此处由于a标签中嵌套了span标签，因此不能直接使用.string</span></span><br><span class="line">        <span class="comment"># 使用.text获取标签中的文本</span></span><br><span class="line">        name = comic.text</span><br><span class="line">        <span class="comment"># ls.insert(i,x)：在列表ls的第i位置增加元素x，其余元素向后移</span></span><br><span class="line">        chapter_names.insert(<span class="number">0</span>,name)</span><br><span class="line">        chapter_urls.insert(<span class="number">0</span>,href)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(chapter_names)</span><br><span class="line">    <span class="built_in">print</span>(chapter_urls)  </span><br></pre></td></tr></table></figure><h3 id="获取漫画图片地址"><a href="#获取漫画图片地址" class="headerlink" title="获取漫画图片地址"></a>获取漫画图片地址</h3><p>右击或F12打开调试窗口，定位找到图片的链接，然后再 <code>查看网页源码</code>（在网址前加上 <code>view-source:</code> 来查看网页源码）来判断图片是否是动态加载。若网页源码中存在这些图片链接，则说明图片是 <code>非动态加载</code> 的。此时可直接爬取网页获取图片链接，然后下载图片。</p><p>以下部分针对 <code>动态加载</code> 的图片：</p><p>使用 <code>view-source:</code> 方法可以查看页面源码，但不管动态加载的内容。这里面没有图片链接，就说明图片是动态加载的。使用 JavaScript 动态加载，有两种方式：<code>外部加载</code>、<code>内部加载</code>。</p><ul><li><code>外部加载</code>：即在页面中引用JS文件</li><li><code>内部加载</code>：即Javascript脚本内容通过内嵌式写入html中。</li></ul><p>对于当前网站，找一个图片链接进行测试，例如：</p><p><code>https://images.dmzj.com/img/chapterpic/3059/14237/14395217739069.jpg</code></p><p>使用 <code>14395217739069</code> 在浏览器的调试页面搜索，因为一般这种动态加载，链接都是程序合成的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        <span class="keyword">var</span> arr_img = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">        <span class="keyword">var</span> page = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="built_in">eval</span>(<span class="keyword">function</span>(<span class="params">p,a,c,k,e,d</span>)&#123;e=<span class="keyword">function</span>(<span class="params">c</span>)&#123;<span class="keyword">return</span>(c&lt;a?<span class="string">&#x27;&#x27;</span>:<span class="title function_">e</span>(<span class="built_in">parseInt</span>(c/a)))+((c=c%a)&gt;<span class="number">35</span>?<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(c+<span class="number">29</span>):c.<span class="title function_">toString</span>(<span class="number">36</span>))&#125;;<span class="keyword">if</span>(!<span class="string">&#x27;&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/^/</span>,<span class="title class_">String</span>))&#123;<span class="keyword">while</span>(c--)&#123;d[<span class="title function_">e</span>(c)]=k[c]||<span class="title function_">e</span>(c)&#125;k=[<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> d[e]&#125;];e=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span><span class="string">&#x27;\\w+&#x27;</span>&#125;;c=<span class="number">1</span>&#125;;<span class="keyword">while</span>(c--)&#123;<span class="keyword">if</span>(k[c])&#123;p=p.<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;\\b&#x27;</span>+<span class="title function_">e</span>(c)+<span class="string">&#x27;\\b&#x27;</span>,<span class="string">&#x27;g&#x27;</span>),k[c])&#125;&#125;<span class="keyword">return</span> p&#125;(<span class="string">&#x27;g f=\&#x27;&#123;&quot;e&quot;:&quot;h&quot;,&quot;i&quot;:&quot;0&quot;,&quot;l&quot;:&quot;k\\/3\\/5\\/2\\/j.4\\r\\6\\/3\\/5\\/2\\/d.4\\r\\6\\/3\\/5\\/2\\/7.4\\r\\6\\/3\\/5\\/2\\/8.4\\r\\6\\/3\\/5\\/2\\/c.4\\r\\6\\/3\\/5\\/2\\/b.4\\r\\6\\/3\\/5\\/2\\/a.4\\r\\6\\/3\\/5\\/2\\/9.4\\r\\6\\/3\\/5\\/2\\/m.4\\r\\6\\/3\\/5\\/2\\/v.4\\r\\6\\/3\\/5\\/2\\/A.4\\r\\6\\/3\\/5\\/2\\/n.4\\r\\6\\/3\\/5\\/2\\/B.4\\r\\6\\/3\\/5\\/2\\/x.4\\r\\6\\/3\\/5\\/2\\/y.4&quot;,&quot;w&quot;:&quot;p&quot;,&quot;o&quot;:&quot;1&quot;,&quot;q&quot;:&quot;\\s\\u \\t\\z&quot;&#125;\&#x27;;&#x27;</span>,<span class="number">38</span>,<span class="number">38</span>,<span class="string">&#x27;||14237|chapterpic|jpg|3059|nimg|14395217891719|14395217893745|14395217913416|14395217908431|14395217904781|1439521790086|1439521788936|id|pages|var|41917|hidden|14395217739069|img|page_url|14395217918734|14395217931135|chapter_order|15|chapter_name||u7b2c01|u91cd|u8bdd|14395217923415|sum_pages|14395217940216|14395217943921|u751f|14395217926321|1439521793602&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27;|&#x27;</span>),<span class="number">0</span>,&#123;&#125;))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>可以发现该数字就在其中，并且链接中的数字是 <code>由3059 + 长数字 + 14237组成</code>，合成数字，观察图片顺序是否正确。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.dmzj.com/view/yaoshenji/41917.html&#x27;</span></span><br><span class="line">req = requests.get(url = url)</span><br><span class="line">html = BeautifulSoup(req.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">script_info = html.script</span><br><span class="line"><span class="comment"># 找到所有长度为13或14的数字</span></span><br><span class="line">pics = re.findall(<span class="string">&#x27;\d&#123;13,14&#125;&#x27;</span>,<span class="built_in">str</span>(script_info))</span><br><span class="line"><span class="comment"># 找到3059</span></span><br><span class="line">chapter_qian = re.findall(<span class="string">&#x27;\|jpg\|(\d&#123;4&#125;)&#x27;</span>,<span class="built_in">str</span>(script_info))[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 找到14237</span></span><br><span class="line">chapterpic_hou = re.findall(<span class="string">&#x27;\|\|(\d&#123;5&#125;)&#x27;</span>,<span class="built_in">str</span>(script_info))[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> pic <span class="keyword">in</span> pics:</span><br><span class="line">    url = <span class="string">&#x27;https://images.dmzj.com/img/chapterpic/&#x27;</span> + chapter_qian + <span class="string">&#x27;/&#x27;</span> + chapterpic_hou + <span class="string">&#x27;/&#x27;</span> + pic + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(url)</span><br></pre></td></tr></table></figure><p>图片顺序有误，发现这些数字里有13位的，有14位的，并且都是以14开头的数字，猜测它 <code>末位补零后比较</code> 的结果就是图片的顺序。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.dmzj.com/view/yaoshenji/41917.html&#x27;</span></span><br><span class="line">req = requests.get(url = url)</span><br><span class="line">html = BeautifulSoup(req.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">script_info = html.script</span><br><span class="line">pics = re.findall(<span class="string">&#x27;\d&#123;13,14&#125;&#x27;</span>,<span class="built_in">str</span>(script_info))</span><br><span class="line"><span class="comment"># 长度为13则末尾补0</span></span><br><span class="line"><span class="keyword">for</span> idx, pic <span class="keyword">in</span> <span class="built_in">enumerate</span>(pics):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(pic) == <span class="number">13</span>:</span><br><span class="line">        pics[idx] = pic + <span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">pics = <span class="built_in">sorted</span>(pics, key=<span class="keyword">lambda</span> x:<span class="built_in">int</span>(x))</span><br><span class="line">chapterpic_qian = re.findall(<span class="string">&#x27;\|jpg\|(\d&#123;4&#125;)&#x27;</span>, <span class="built_in">str</span>(script_info))[<span class="number">0</span>]</span><br><span class="line">chapterpic_hou = re.findall(<span class="string">&#x27;\|\|(\d&#123;5&#125;)&#x27;</span>, <span class="built_in">str</span>(script_info))[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> pic <span class="keyword">in</span> pics:</span><br><span class="line"><span class="comment"># 末尾为0则去除0，因为0是之前添加的</span></span><br><span class="line">    <span class="keyword">if</span> pic[-<span class="number">1</span>] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://images.dmzj.com/img/chapterpic/&#x27;</span> + chapterpic_qian + <span class="string">&#x27;/&#x27;</span> + chapterpic_hou + <span class="string">&#x27;/&#x27;</span> + pic[:-<span class="number">1</span>] + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://images.dmzj.com/img/chapterpic/&#x27;</span> + chapterpic_qian + <span class="string">&#x27;/&#x27;</span> + chapterpic_hou + <span class="string">&#x27;/&#x27;</span> + pic + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(url)</span><br></pre></td></tr></table></figure><p>此时得到正确顺序的图片链接。</p><h3 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h3><p>使用<code>urlretrieve</code>方法下载图片，第一个参数是 <code>下载链接</code>，第二个参数是下载后的 <code>文件保存名</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlretrieve</span><br><span class="line"></span><br><span class="line">dn_url = <span class="string">&#x27;https://images.dmzj.com/img/chapterpic/3059/14237/14395217739069.jpg&#x27;</span></span><br><span class="line">urlretrieve(dn_url,<span class="string">&#x27;1.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>特殊情况：</p><p>出现了HTTP Error，错误代码是 <code>403</code>。403表示资源不可用，这是又是一种 <code>反爬虫</code> 手段。对应图片的真实地址，在浏览器可能无法直接打开，或者能打开，但是一刷新就又不能打开了！如果打开章节页面后，再打开这个图片链接就又能看到图片了。这就是一种 <code>通过Referer的反爬虫手段</code>。Referer可以理解为来路，先打开章节URL链接，再打开图片链接。打开图片的时候，Referer的信息里保存的是章节URL，因此爬取时需要 <code>添加头部信息</code>。</p><p>使用 <code>closing</code> 方法可以设置Headers信息，这个Headers信息里保存Referer来路，即章节的链接。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> closing</span><br><span class="line"></span><br><span class="line">download_header = &#123;</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.dmzj.com/view/yaoshenji/41917.html&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dn_url = <span class="string">&#x27;https://images.dmzj.com/img/chapterpic/3059/14237/14395217739069.jpg&#x27;</span></span><br><span class="line"><span class="keyword">with</span> closing(requests.get(dn_url, headers = download_header, stream = <span class="literal">True</span>)) <span class="keyword">as</span> response:</span><br><span class="line">    chunk_size = <span class="number">1024</span>  </span><br><span class="line">    content_size = <span class="built_in">int</span>(response.headers[<span class="string">&#x27;content-length&#x27;</span>])  </span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;文件大小:%0.2f KB&#x27;</span> % (content_size / chunk_size))</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.jpg&#x27;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> file:  </span><br><span class="line">            <span class="keyword">for</span> data <span class="keyword">in</span> response.iter_content(chunk_size=chunk_size):  </span><br><span class="line">                file.write(data)  </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;链接异常&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;下载完成！&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="整合代码-1"><a href="#整合代码-1" class="headerlink" title="整合代码"></a>整合代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> closing</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建保存目录</span></span><br><span class="line">save_dir = <span class="string">&#x27;妖神记&#x27;</span></span><br><span class="line"><span class="keyword">if</span> save_dir <span class="keyword">not</span> <span class="keyword">in</span> os.listdir(<span class="string">&#x27;./&#x27;</span>):</span><br><span class="line">    <span class="comment"># 列出当前执行路径目录下的文件</span></span><br><span class="line">    os.mkdir(save_dir)</span><br><span class="line"></span><br><span class="line">target_url = <span class="string">&quot;https://www.dmzj.com/info/yaoshenji.html&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取动漫章节链接和章节名</span></span><br><span class="line">r = requests.get(url = target_url)</span><br><span class="line">bs = BeautifulSoup(r.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">list_con_li = bs.find(<span class="string">&#x27;ul&#x27;</span>, class_=<span class="string">&quot;list_con_li&quot;</span>)</span><br><span class="line">cartoon_list = list_con_li.find_all(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">chapter_names = []</span><br><span class="line">chapter_urls = []</span><br><span class="line"><span class="keyword">for</span> cartoon <span class="keyword">in</span> cartoon_list:</span><br><span class="line">    href = cartoon.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    name = cartoon.text</span><br><span class="line">    chapter_names.insert(<span class="number">0</span>, name)</span><br><span class="line">    chapter_urls.insert(<span class="number">0</span>, href)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载漫画 </span></span><br><span class="line"><span class="keyword">for</span> i, url <span class="keyword">in</span> <span class="built_in">enumerate</span>(tqdm(chapter_urls)):</span><br><span class="line">    download_header = &#123;</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: url</span><br><span class="line">    &#125;</span><br><span class="line">    name = chapter_names[i]</span><br><span class="line">    <span class="comment"># 去掉.</span></span><br><span class="line">    <span class="keyword">while</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">        name = name.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    chapter_save_dir = os.path.join(save_dir, name)</span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> os.listdir(save_dir):</span><br><span class="line">        os.mkdir(chapter_save_dir)</span><br><span class="line">        r = requests.get(url = url)</span><br><span class="line">        html = BeautifulSoup(r.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        script_info = html.script</span><br><span class="line">        pics = re.findall(<span class="string">&#x27;\d&#123;13,14&#125;&#x27;</span>, <span class="built_in">str</span>(script_info))</span><br><span class="line">        <span class="keyword">for</span> j, pic <span class="keyword">in</span> <span class="built_in">enumerate</span>(pics):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(pic) == <span class="number">13</span>:</span><br><span class="line">                pics[j] = pic + <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        pics = <span class="built_in">sorted</span>(pics, key=<span class="keyword">lambda</span> x:<span class="built_in">int</span>(x))</span><br><span class="line">        chapterpic_hou = re.findall(<span class="string">&#x27;\|(\d&#123;5&#125;)\|&#x27;</span>, <span class="built_in">str</span>(script_info))[<span class="number">0</span>]</span><br><span class="line">        chapterpic_qian = re.findall(<span class="string">&#x27;\|(\d&#123;4&#125;)\|&#x27;</span>, <span class="built_in">str</span>(script_info))[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> idx, pic <span class="keyword">in</span> <span class="built_in">enumerate</span>(pics):</span><br><span class="line">            <span class="keyword">if</span> pic[-<span class="number">1</span>] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">                url = <span class="string">&#x27;https://images.dmzj.com/img/chapterpic/&#x27;</span> + chapterpic_qian + <span class="string">&#x27;/&#x27;</span> + chapterpic_hou + <span class="string">&#x27;/&#x27;</span> + pic[:-<span class="number">1</span>] + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                url = <span class="string">&#x27;https://images.dmzj.com/img/chapterpic/&#x27;</span> + chapterpic_qian + <span class="string">&#x27;/&#x27;</span> + chapterpic_hou + <span class="string">&#x27;/&#x27;</span> + pic + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">            pic_name = <span class="string">&#x27;%03d.jpg&#x27;</span> % (idx + <span class="number">1</span>)</span><br><span class="line">            pic_save_path = os.path.join(chapter_save_dir, pic_name)</span><br><span class="line">            <span class="keyword">with</span> closing(requests.get(url, headers = download_header, stream = <span class="literal">True</span>)) <span class="keyword">as</span> response:  </span><br><span class="line">                chunk_size = <span class="number">1024</span>  </span><br><span class="line">                content_size = <span class="built_in">int</span>(response.headers[<span class="string">&#x27;content-length&#x27;</span>])  </span><br><span class="line">                <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(pic_save_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> file:  </span><br><span class="line">                        <span class="keyword">for</span> data <span class="keyword">in</span> response.iter_content(chunk_size=chunk_size):  </span><br><span class="line">                            file.write(data)  </span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;链接异常&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="实例：爬取视频"><a href="#实例：爬取视频" class="headerlink" title="实例：爬取视频"></a>实例：爬取视频</h2><h3 id="查找资源"><a href="#查找资源" class="headerlink" title="查找资源"></a>查找资源</h3><p>抓取 <code>搜索的请求包</code>：输入要搜索的内容，然后打开并清理 <code>Network</code>，点击搜索按钮。此时 Network 里第一个弹出的就是搜索的请求包。它是一个 POST 请求，即给服务器发送数据。</p><p>找到搜索结果对应的标签进行爬取，爬取时需要根据浏览器的抓包结果，添加 <code>data信息</code> 和 <code>Headers信息</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">search_keyword = <span class="string">&#x27;鬼灭之刃第二季&#x27;</span></span><br><span class="line">search_url = <span class="string">&#x27;http://www.yinghuaz.com/search/-------------.html&#x27;</span></span><br><span class="line"><span class="comment"># 存在参数的搜索页面</span></span><br><span class="line"><span class="comment"># http://www.jisudhw.com/index.php?m=vod-search</span></span><br><span class="line"><span class="comment"># serach_params = &#123;</span></span><br><span class="line"><span class="comment">#    &#x27;m&#x27;: &#x27;vod-search&#x27;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line">serach_headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://www.yinghuaz.com/search/-------------.html&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;http://www.yinghuaz.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;www.yinghuaz.com&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">serach_datas = &#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span>: search_keyword,</span><br><span class="line">    <span class="string">&#x27;submit&#x27;</span>: <span class="string">&#x27;search&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url=search_url, headers=serach_headers, data=serach_datas)</span><br><span class="line"><span class="comment"># r = requests.post(url=search_url, params=serach_params, headers=serach_headers, data=serach_datas)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取搜索结果</span></span><br><span class="line">r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">server = <span class="string">&#x27;http://www.yinghuaz.com&#x27;</span></span><br><span class="line">search_html = BeautifulSoup(r.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">search_lists = search_html.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;imgs&#x27;</span>)</span><br><span class="line">url = server + search_lists.find(<span class="string">&#x27;p&#x27;</span>).find(<span class="string">&#x27;a&#x27;</span>).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">name = search_lists.find(<span class="string">&#x27;p&#x27;</span>).find(<span class="string">&#x27;a&#x27;</span>).string</span><br><span class="line"><span class="built_in">print</span>(url + <span class="string">&#x27;&#x27;</span> +name)</span><br></pre></td></tr></table></figure><h3 id="获取每集链接"><a href="#获取每集链接" class="headerlink" title="获取每集链接"></a>获取每集链接</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://www.yinghuaz.com/view/2391.html鬼灭之刃第二季&#x27;</span></span><br><span class="line">req = requests.get(url = url)</span><br><span class="line">req.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">bs = BeautifulSoup(req.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">bs = bs.find(<span class="string">&quot;div&quot;</span>,&#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">&#x27;play_1&#x27;</span>&#125;)</span><br><span class="line">episodes = bs.find_all(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> episode <span class="keyword">in</span> episodes:</span><br><span class="line">    url = server + episode.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第%0d集：&#x27;</span>%num + <span class="string">&#x27; &#x27;</span> + url)</span><br><span class="line">    num+=<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="获取每集视频对应的链接"><a href="#获取每集视频对应的链接" class="headerlink" title="获取每集视频对应的链接"></a>获取每集视频对应的链接</h3><p>查找视频对应的链接，发现每一集视频都在id为WANG的iframe标签中，但通过view-source查看源码时发现iframe不存在，但id为playbox的div中也存在视频链接，只是缺少前面一部分，补齐即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> episode <span class="keyword">in</span> episodes:</span><br><span class="line">    url = server + episode.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    req = requests.get(url = url)</span><br><span class="line">    bs = BeautifulSoup(req.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    content = <span class="string">&#x27;https://jx.wpng.cc/m.php?url=&#x27;</span> + bs.find(<span class="string">&#x27;div&#x27;</span>,&#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">&#x27;playbox&#x27;</span>&#125;).get(<span class="string">&#x27;data-vid&#x27;</span>)</span><br><span class="line"><span class="comment"># 第11集视频链接少了两位&#x27;u8&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(content)==<span class="number">103</span>:</span><br><span class="line">        content+=<span class="string">&#x27;u8&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;视频&#x27;</span> + <span class="built_in">str</span>(num) + <span class="string">&#x27;链接：&#x27;</span> + <span class="string">&#x27; &#x27;</span> + content)</span><br><span class="line">    num+=<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="下载视频"><a href="#下载视频" class="headerlink" title="下载视频"></a>下载视频</h3><p>视频下载，存在两者情况：</p><blockquote><p>链接以 <code>mp4、mkv、rmvb</code> 格式为后缀，使用图片下载方法即可。</p><p>链接以 <code>m3u8</code> 为后缀结尾的链接，这种格式的视频分段存储，由一个个ts片段组成。可以把 m3u8 文件理解为链表，每个 ts 视频片段文件都有下一个时序的 ts 视频片段的地址。</p></blockquote><p>下载时使用 <code>FFmpeg（多媒体视频处理工具）</code>。安装FFmpeg：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install ffmpy3</span><br></pre></td></tr></table></figure><p>下载 <code>m3u8</code> 类型视频，方式一：<code>命令行</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;http://youku.com-youku.net/20180614/11920_4c9e1cc1/index.m3u8&quot;</span> <span class="string">&quot;第001集.mp4&quot;</span></span><br></pre></td></tr></table></figure><p>方式二：<code>Python代码</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ffmpy3</span><br><span class="line"></span><br><span class="line">exe = <span class="string">r&#x27;F:\学习\Python\ffmpeg-master-latest-win64-lgpl-shared\bin\ffmpeg.exe&#x27;</span></span><br><span class="line">ff = ffmpy3.FFmpeg(executable=exe, inputs=&#123;<span class="string">&#x27;http://youku.com-youku.net/20180614/11920_4c9e1cc1/index.m3u8&#x27;</span>:<span class="literal">None</span>&#125;,outputs=&#123;<span class="string">&#x27;第1集.mp4&#x27;</span>:<span class="literal">None</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(ff.cmd)</span><br><span class="line">ff.run()</span><br></pre></td></tr></table></figure><blockquote><p>FFmpeg 自动整合 ts 分段视频，并保存为 mp4 格式的视频。</p><p>FFmpeg.exe下载地址：<a href="https://github.com/BtbN/FFmpeg-Builds/releases">https://github.com/BtbN/FFmpeg-Builds/releases</a></p></blockquote><p>下载 <code>MP4</code> 类型的视频</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ffmpy3</span><br><span class="line"></span><br><span class="line">exe = <span class="string">r&#x27;F:\学习\Python\ffmpeg-master-latest-win64-lgpl-shared\bin\ffmpeg.exe&#x27;</span></span><br><span class="line">ff = ffmpy3.FFmpeg(executable=exe, inputs=&#123;<span class="string">&#x27;https://ali-ad.a.yximgs.com/bs2/ad-creative-center-temp/1b8e681bf6284f8dbb5bd7eb56eb27c7.mp4&#x27;</span>:<span class="literal">None</span>&#125;,outputs=&#123;<span class="string">&#x27;第2集.mp4&#x27;</span>:<span class="literal">None</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(ff.cmd)</span><br><span class="line">ff.run()</span><br></pre></td></tr></table></figure><h3 id="整合代码-2"><a href="#整合代码-2" class="headerlink" title="整合代码"></a>整合代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> ffmpy3</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"></span><br><span class="line">search_keyword = <span class="string">&#x27;鬼灭之刃第二季&#x27;</span></span><br><span class="line">search_url = <span class="string">&#x27;http://www.yinghuaz.com/search/-------------.html&#x27;</span></span><br><span class="line">serach_headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://www.yinghuaz.com/search/-------------.html&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;http://www.yinghuaz.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;www.yinghuaz.com&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">serach_datas = &#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span>: search_keyword,</span><br><span class="line">    <span class="string">&#x27;submit&#x27;</span>: <span class="string">&#x27;search&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url=search_url, headers=serach_headers, data=serach_datas)</span><br><span class="line">r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">server = <span class="string">&#x27;http://www.yinghuaz.com&#x27;</span></span><br><span class="line">search_html = BeautifulSoup(r.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">search_lists = search_html.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;imgs&#x27;</span>)</span><br><span class="line">url = server + search_lists.find(<span class="string">&#x27;p&#x27;</span>).find(<span class="string">&#x27;a&#x27;</span>).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">name = search_lists.find(<span class="string">&#x27;p&#x27;</span>).find(<span class="string">&#x27;a&#x27;</span>).string</span><br><span class="line"><span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> os.listdir(<span class="string">&#x27;./&#x27;</span>):</span><br><span class="line">    os.mkdir(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取每一集的url</span></span><br><span class="line">req = requests.get(url = url)</span><br><span class="line">req.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">bs = BeautifulSoup(req.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">bs = bs.find(<span class="string">&quot;div&quot;</span>,&#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">&#x27;play_1&#x27;</span>&#125;)</span><br><span class="line">episodes = bs.find_all(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">num = <span class="number">1</span></span><br><span class="line">serach_res = &#123;&#125;</span><br><span class="line">exe = <span class="string">r&#x27;F:\学习\Python\ffmpeg-master-latest-win64-lgpl-shared\bin\ffmpeg.exe&#x27;</span></span><br><span class="line"><span class="keyword">for</span> episode <span class="keyword">in</span> episodes:</span><br><span class="line">    <span class="comment"># 每一集的url</span></span><br><span class="line">    url = server + episode.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    req = requests.get(url = url)</span><br><span class="line">    bs = BeautifulSoup(req.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    <span class="comment"># 每一集视频的url</span></span><br><span class="line">    url = <span class="string">&#x27;https://jx.wpng.cc/m.php?url=&#x27;</span> + bs.find(<span class="string">&#x27;div&#x27;</span>,&#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">&#x27;playbox&#x27;</span>&#125;).get(<span class="string">&#x27;data-vid&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(url)==<span class="number">103</span>:</span><br><span class="line">        url+=<span class="string">&#x27;u8&#x27;</span></span><br><span class="line">    serach_res[url] = num</span><br><span class="line">    num+=<span class="number">1</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">downVideo</span>(<span class="params">url</span>):</span><br><span class="line">    num = serach_res[url]</span><br><span class="line">    name = os.path.join(video_dir,<span class="string">&#x27;第%02d集.mp4&#x27;</span> %num)</span><br><span class="line">    ff = ffmpy3.FFmpeg(executable=exe, inputs=&#123;url:<span class="literal">None</span>&#125;,outputs=&#123;name:<span class="literal">None</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(ff.cmd)</span><br><span class="line">    ff.run()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开8个线程    </span></span><br><span class="line">pool = ThreadPool(<span class="number">8</span>)</span><br><span class="line">results = pool.<span class="built_in">map</span>(downVideo,serach_res.keys())</span><br><span class="line">pool.close()</span><br><span class="line">pool.join()</span><br></pre></td></tr></table></figure><h3 id="特殊情况——非真实链接"><a href="#特殊情况——非真实链接" class="headerlink" title="特殊情况——非真实链接"></a>特殊情况——非真实链接</h3><p>当我们得到一个m3u8形式的视频链接时，需要测试该链接是否是 <code>真实地址</code>。</p><p>运行下方代码测试 <code>https://mgtv.sd-play.com/20211006/UiC7BSo5/index.m3u8</code>，从结果可以看出这是一个嵌套的地址。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> m3u8</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">playlist = m3u8.load(uri=<span class="string">&#x27;https://mgtv.sd-play.com/20211006/UiC7BSo5/index.m3u8&#x27;</span>, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(playlist.data)</span><br></pre></td></tr></table></figure><p>解析真实地址，运行下方代码，结果为：</p><p><code>https://mgtv.sd-play.com/20211006/UiC7BSo5/1000kb/hls/index.m3u8</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> m3u8</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_real_url</span>(<span class="params">url</span>):</span><br><span class="line">    playlist = m3u8.load(uri=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> playlist.playlists[<span class="number">0</span>].absolute_uri</span><br><span class="line"></span><br><span class="line">real_url = get_real_url(<span class="string">&#x27;https://mgtv.sd-play.com/20211006/UiC7BSo5/index.m3u8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(real_url)</span><br></pre></td></tr></table></figure><p>解析真实地址的加密key，运行代码后可以看到密钥下载地址和加密类型，结果为：</p><p><code>https://mgtv.shanshanku.com/20211006/UiC7BSo5/1000kb/hls/key.key AES-128 None</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">playlist = m3u8.load(uri=real_url, headers=headers)</span><br><span class="line">key = playlist.keys[-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(key.uri, key.method, key.iv)</span><br></pre></td></tr></table></figure><p>使用request下载密钥，运行结果为：</p><p><code>b&#39;888288aee8b98ae9&#39;</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(playlist.keys[<span class="number">0</span>].uri, headers=headers)</span><br><span class="line">key = r.content</span><br><span class="line"><span class="built_in">print</span>(key)</span><br></pre></td></tr></table></figure><p><code>单线程</code> 直接下载视频，整合代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> m3u8</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_real_url</span>(<span class="params">url</span>):</span><br><span class="line">    playlist = m3u8.load(uri=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> playlist.playlists[<span class="number">0</span>].absolute_uri</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AESDecrypt</span>(<span class="params">cipher_text, key, iv</span>):</span><br><span class="line">    cipher_text = pad(data_to_pad=cipher_text, block_size=AES.block_size)</span><br><span class="line">    aes = AES.new(key=key, mode=AES.MODE_CBC, iv=key)</span><br><span class="line">    cipher_text = aes.decrypt(cipher_text)</span><br><span class="line">    <span class="keyword">return</span> cipher_text</span><br><span class="line"></span><br><span class="line">real_url = get_real_url(<span class="string">&#x27;https://mgtv.sd-play.com/20211006/UiC7BSo5/index.m3u8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">playlist = m3u8.load(uri=real_url, headers=headers)</span><br><span class="line">key = playlist.keys[-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(key.uri, key.method, key.iv)</span><br><span class="line"></span><br><span class="line">r = requests.get(playlist.keys[<span class="number">0</span>].uri, headers=headers)</span><br><span class="line">key = r.content</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(playlist.segments)</span><br><span class="line"><span class="comment"># playlist.segments中存储的时各个ts片段</span></span><br><span class="line">size = <span class="number">0</span></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">for</span> i, seg <span class="keyword">in</span> <span class="built_in">enumerate</span>(playlist.segments, <span class="number">1</span>):</span><br><span class="line">    r = requests.get(seg.absolute_uri, headers=headers)</span><br><span class="line">    data = r.content</span><br><span class="line">    data = AESDecrypt(data, key=key, iv=key)</span><br><span class="line">    size += <span class="built_in">len</span>(data)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;reusult.mp4&quot;</span>, <span class="string">&quot;ab&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\r下载进度(<span class="subst">&#123;i&#125;</span>/<span class="subst">&#123;n&#125;</span>)，已下载：<span class="subst">&#123;size/<span class="number">1024</span>/<span class="number">1024</span>:<span class="number">.2</span>f&#125;</span>MB，下载已耗时：<span class="subst">&#123;time.time()-start:<span class="number">.2</span>f&#125;</span>s&quot;</span>, end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><p>封装函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> m3u8</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_real_url</span>(<span class="params">url</span>):</span><br><span class="line">    playlist = m3u8.load(uri=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> playlist.playlists[<span class="number">0</span>].absolute_uri</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AESDecrypt</span>(<span class="params">cipher_text, key, iv</span>):</span><br><span class="line">    cipher_text = pad(data_to_pad=cipher_text, block_size=AES.block_size)</span><br><span class="line">    aes = AES.new(key=key, mode=AES.MODE_CBC, iv=key)</span><br><span class="line">    cipher_text = aes.decrypt(cipher_text)</span><br><span class="line">    <span class="keyword">return</span> cipher_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_m3u8_video</span>(<span class="params">url, save_name</span>):</span><br><span class="line">    real_url = get_real_url(url)</span><br><span class="line">    playlist = m3u8.load(uri=real_url, headers=headers)</span><br><span class="line">    key = requests.get(playlist.keys[-<span class="number">1</span>].uri, headers=headers).content</span><br><span class="line"></span><br><span class="line">    n = <span class="built_in">len</span>(playlist.segments)</span><br><span class="line">    size = <span class="number">0</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">for</span> i, seg <span class="keyword">in</span> <span class="built_in">enumerate</span>(playlist.segments, <span class="number">1</span>):</span><br><span class="line">        r = requests.get(seg.absolute_uri, headers=headers)</span><br><span class="line">        data = r.content</span><br><span class="line">        data = AESDecrypt(data, key=key, iv=key)</span><br><span class="line">        size += <span class="built_in">len</span>(data)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(save_name, <span class="string">&quot;ab&quot;</span> <span class="keyword">if</span> i != <span class="number">1</span> <span class="keyword">else</span> <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(data)</span><br><span class="line">        <span class="built_in">print</span>(</span><br><span class="line">            <span class="string">f&quot;\r下载进度(<span class="subst">&#123;i&#125;</span>/<span class="subst">&#123;n&#125;</span>)，已下载：<span class="subst">&#123;size/<span class="number">1024</span>/<span class="number">1024</span>:<span class="number">.2</span>f&#125;</span>MB，下载已耗时：<span class="subst">&#123;time.time()-start:<span class="number">.2</span>f&#125;</span>s&quot;</span>, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">download_m3u8_video(<span class="string">&#x27;https://vod8.wenshibaowenbei.com/20210628/g4yNLlI7/index.m3u8&#x27;</span>, <span class="string">&#x27;走进家门.mp4&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>多线程</code> 改造：对于多线程，由于下载的文件可能出现间断，所以不能直接追加到目标视频中，可以先下载下来，最后统一合并并删除。</p><p>先创建ts视频下载的方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_ts</span>(<span class="params">url, key, i</span>):</span><br><span class="line">    r = requests.get(url, headers=headers)</span><br><span class="line">    data = r.content</span><br><span class="line">    data = AESDecrypt(data, key=key, iv=key)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;tmp/<span class="subst">&#123;i:<span class="number">0</span>&gt;5d&#125;</span>.ts&quot;</span>, <span class="string">&quot;ab&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\r<span class="subst">&#123;i:<span class="number">0</span>&gt;5d&#125;</span>.ts已下载&quot;</span>, end=<span class="string">&quot;  &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;tmp&quot;</span>):</span><br><span class="line">    os.mkdir(<span class="string">&#x27;tmp&#x27;</span>)</span><br></pre></td></tr></table></figure><p>任意下载一个片段测试，检查该片段是否可以正常播放</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> m3u8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_real_url</span>(<span class="params">url</span>):</span><br><span class="line">    playlist = m3u8.load(uri=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> playlist.playlists[<span class="number">0</span>].absolute_uri</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">real_url = get_real_url(</span><br><span class="line">    <span class="string">&#x27;https://mgtv.sd-play.com/20211006/UiC7BSo5/index.m3u8&#x27;</span>)</span><br><span class="line">playlist = m3u8.load(uri=real_url, headers=headers)</span><br><span class="line">key = requests.get(playlist.keys[-<span class="number">1</span>].uri, headers=headers).content</span><br><span class="line"></span><br><span class="line">download_ts(playlist.segments[<span class="number">0</span>].absolute_uri, key, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>10个线程同时一起下载</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">10</span>) <span class="keyword">as</span> pool:</span><br><span class="line">    <span class="keyword">for</span> i, seg <span class="keyword">in</span> <span class="built_in">enumerate</span>(playlist.segments):</span><br><span class="line">        pool.submit(download_ts, seg.absolute_uri, key, i)</span><br></pre></td></tr></table></figure><p>实现文件的合并和ts临时文件清除</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;video.mp4&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fw:</span><br><span class="line">    files = glob.glob(<span class="string">&#x27;tmp/*.ts&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fr:</span><br><span class="line">            fw.write(fr.read())</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;\r<span class="subst">&#123;file&#125;</span>已合并!总数:<span class="subst">&#123;<span class="built_in">len</span>(files)&#125;</span>&#x27;</span>, end=<span class="string">&quot;     &quot;</span>)</span><br><span class="line">        os.remove(file)</span><br></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> m3u8</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_ts</span>(<span class="params">url, key, i</span>):</span><br><span class="line">    r = requests.get(url, headers=headers)</span><br><span class="line">    data = r.content</span><br><span class="line">    data = AESDecrypt(data, key=key, iv=key)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;tmp/<span class="subst">&#123;i:<span class="number">0</span>&gt;5d&#125;</span>.ts&quot;</span>, <span class="string">&quot;ab&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\r<span class="subst">&#123;i:<span class="number">0</span>&gt;5d&#125;</span>.ts已下载&quot;</span>, end=<span class="string">&quot;  &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_real_url</span>(<span class="params">url</span>):</span><br><span class="line">    playlist = m3u8.load(uri=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> playlist.playlists[<span class="number">0</span>].absolute_uri</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AESDecrypt</span>(<span class="params">cipher_text, key, iv</span>):</span><br><span class="line">    cipher_text = pad(data_to_pad=cipher_text, block_size=AES.block_size)</span><br><span class="line">    aes = AES.new(key=key, mode=AES.MODE_CBC, iv=key)</span><br><span class="line">    cipher_text = aes.decrypt(cipher_text)</span><br><span class="line">    <span class="keyword">return</span> cipher_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_m3u8_video</span>(<span class="params">url, save_name, max_workers=<span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;tmp&quot;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&#x27;tmp&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    real_url = get_real_url(url)</span><br><span class="line">    playlist = m3u8.load(uri=real_url, headers=headers)</span><br><span class="line">    key = requests.get(playlist.keys[-<span class="number">1</span>].uri, headers=headers).content</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=max_workers) <span class="keyword">as</span> pool:</span><br><span class="line">        <span class="keyword">for</span> i, seg <span class="keyword">in</span> <span class="built_in">enumerate</span>(playlist.segments):</span><br><span class="line">            pool.submit(download_ts, seg.absolute_uri, key, i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(save_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fw:</span><br><span class="line">        files = glob.glob(<span class="string">&#x27;tmp/*.ts&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fr:</span><br><span class="line">                fw.write(fr.read())</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;\r<span class="subst">&#123;file&#125;</span>已合并!总数:<span class="subst">&#123;<span class="built_in">len</span>(files)&#125;</span>&#x27;</span>, end=<span class="string">&quot;     &quot;</span>)</span><br><span class="line">            os.remove(file)</span><br><span class="line"></span><br><span class="line">download_m3u8_video(<span class="string">&#x27;https://vod8.wenshibaowenbei.com/20210628/g4yNLlI7/index.m3u8&#x27;</span>, <span class="string">&#x27;走进家门.mp4&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="自动化测试工具-Selenium"><a href="#自动化测试工具-Selenium" class="headerlink" title="自动化测试工具 Selenium"></a>自动化测试工具 Selenium</h2><h3 id="安装Selenium及浏览器驱动"><a href="#安装Selenium及浏览器驱动" class="headerlink" title="安装Selenium及浏览器驱动"></a>安装Selenium及浏览器驱动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><blockquote><p>浏览器驱动下载地址：<a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a></p><p>注意：安装时需要注意浏览器 <code>版本对应</code>。</p></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开www.python.org官网，找到name属性为q的搜索框，输入pycon并点击搜索。</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    driver = webdriver.Chrome(<span class="string">&quot;F:\学习\Python\chromedriver.exe&quot;</span>)</span><br><span class="line">    driver.get(<span class="string">&quot;https://www.python.org&quot;</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&quot;Python&quot;</span> <span class="keyword">in</span> driver.title</span><br><span class="line">    elem = driver.find_element_by_name(<span class="string">&quot;q&quot;</span>)</span><br><span class="line">    elem.send_keys(<span class="string">&quot;pycon&quot;</span>)</span><br><span class="line">    elem.send_keys(Keys.RETURN)</span><br><span class="line">    <span class="built_in">print</span>(driver.page_source)</span><br></pre></td></tr></table></figure><h3 id="find-element-by"><a href="#find-element-by" class="headerlink" title="find_element_by_*"></a>find_element_by_*</h3><p><code>find_element_by_*</code> 是一种定位网页元素的方法，有以下方式：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">find_element_by_id</span><br><span class="line">find_element_by_name</span><br><span class="line">find_element_by_xpath</span><br><span class="line">find_element_by_link_text</span><br><span class="line">find_element_by_partial_link_text</span><br><span class="line">find_element_by_tag_name</span><br><span class="line">find_element_by_class_name</span><br><span class="line">find_element_by_css_selector</span><br></pre></td></tr></table></figure><p>可以通过标签的 id 属性、name 属性、class_name 属性查找元素，也可以通过 xpath 等，其中用到最多的就是 <code>xpath</code>。</p><p>例如查找百度的搜索框：在调试窗口中找到搜索框对应的标签，点击右键，选择 copy 下的 <code>copy xpath</code>，直接复制 xpath 。内容为：<code>//*[@id=&quot;kw&quot;]</code>，其实意思就是从根目录开始找，找到 id 属性为 kw 的标签。定位到搜索框，就可以输入想搜索的内容。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    driver = webdriver.Chrome(<span class="string">&quot;F:\学习\Python\chromedriver.exe&quot;</span>)</span><br><span class="line">    driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">    elem = driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;kw&quot;]&#x27;</span>)</span><br><span class="line">    elem.send_keys(<span class="string">&quot;剑来&quot;</span>)</span><br><span class="line">    elem.send_keys(Keys.RETURN)</span><br></pre></td></tr></table></figure><h3 id="Selenuim-的参考文档"><a href="#Selenuim-的参考文档" class="headerlink" title="Selenuim 的参考文档"></a>Selenuim 的参考文档</h3><blockquote><p>官方手册：<a href="https://selenium-python.readthedocs.io/index.html">https://selenium-python.readthedocs.io/index.html</a></p><p>一篇参考文章：<a href="https://blog.csdn.net/c406495762/article/details/72331737">https://blog.csdn.net/c406495762/article/details/72331737</a></p></blockquote><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p> 爬取小说、漫画、视频的详细内容可参考该链接的 <code>网络爬虫部分</code>：<a href="https://github.com/Jack-Cherish/PythonPark">https://github.com/Jack-Cherish/PythonPark</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo博客搭建过程</title>
      <link href="/2022/09/15/%E5%9F%BA%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
      <url>/2022/09/15/%E5%9F%BA%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>搭建博客前需要安装一些 <code>必要软件</code>：<code>Node.js</code> 及 <code>git</code>，此外还可以安装编写博客的 <code>Markdown编译器</code>，我选择的是 <code>Typora</code>。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ol><li><p>建立对应的博客文件夹，例如：<code>F:\学习\Blogroot</code>，该目录将作为博客的根目录。</p></li><li><p>使用npm安装Hexo，在 <code>Blogroot</code> 路径下 <code>右箭</code> -&gt; <code>Git Bash Here</code>，输入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment">#将npm源替换为阿里的镜像。之后的安装就会迅速很多了。</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"><span class="comment"># hexo-cli 是 hexo的指令集。</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="comment"># 有了指令集以后，使用它的初始化指令来初始化安装Hexo博客。</span></span><br></pre></td></tr></table></figure></li><li><p>本地浏览，在 <code>Blogroot</code> 路径下 <code>右箭</code> -&gt; <code>Git Bash Here</code>，输入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br><span class="line">hexo s <span class="comment">#简写</span></span><br></pre></td></tr></table></figure></li><li><p>常用命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"><span class="comment">#清空缓存</span></span><br><span class="line">hexo generate</span><br><span class="line">hexo g <span class="comment">#简写</span></span><br><span class="line"><span class="comment">#重新编译</span></span><br><span class="line">hexo server</span><br><span class="line">hexo s <span class="comment">#简写</span></span><br><span class="line"><span class="comment">#打开本地访问</span></span><br><span class="line">hexo new &lt;layout&gt; <span class="string">&quot;文章title&quot;</span></span><br><span class="line"><span class="comment">#新建文章</span></span><br><span class="line">hexo deploy</span><br><span class="line">hexo d <span class="comment">#简写</span></span><br><span class="line"><span class="comment">#部署到云端</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="添加页面"><a href="#添加页面" class="headerlink" title="添加页面"></a>添加页面</h2><h3 id="添加分类页面"><a href="#添加分类页面" class="headerlink" title="添加分类页面"></a>添加分类页面</h3><p>在 <code>Blogroot</code> 路径下<code>右箭</code> -&gt; <code>Git Bash Here</code>，输入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br><span class="line"><span class="comment"># 创建“分类”页面</span></span><br></pre></td></tr></table></figure><p>打开 <code>Blogroot\source\categories\index.md</code>，在头部加上 <code>type</code> 属性</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: 分类</span><br><span class="line"><span class="built_in">date</span>: 2022-09-14 20:42:34</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure><p>给文章添加分类，例如：给 <code>Hello-world</code> 添加分类，打开 <code>Blogroot\source\_posts\Hello-world.md</code>，修改头部</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">categories: 学习笔记</span><br></pre></td></tr></table></figure><h3 id="添加标签页面"><a href="#添加标签页面" class="headerlink" title="添加标签页面"></a>添加标签页面</h3><p>在 <code>Blogroot</code> 路径下<code>右箭</code> -&gt; <code>Git Bash Here</code>，输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line"># 创建“标签”页面</span><br></pre></td></tr></table></figure><p>打开 <code>Blogroot\source\tags\index.md</code>， 在头部加上 <code>type</code> 属性</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: 标签</span><br><span class="line"><span class="built_in">date</span>: 2022-09-14 20:43:40</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure><p>给文章添加标签，例如：给 <code>hello-world</code> 添加标签，打开 <code>Blogroot\source\_posts\Hello-world.md</code>，修改头部</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">categories: 学习笔记</span><br><span class="line">tags: [node.js, hexo]</span><br></pre></td></tr></table></figure><p><em>注：添加标签的第二种写法——使用 <code>-</code> 短划线列出来</em></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">categories: 学习笔记</span><br><span class="line">tags: </span><br><span class="line">- node.js <span class="comment">#短划线后有空格</span></span><br><span class="line">- Hexo</span><br></pre></td></tr></table></figure><h3 id="添加友情链接页面"><a href="#添加友情链接页面" class="headerlink" title="添加友情链接页面"></a>添加友情链接页面</h3><p>在 <code>Blogroot</code> 路径下<code>右箭</code> -&gt; <code>Git Bash Here</code>，输入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="built_in">link</span></span><br><span class="line"><span class="comment"># 创建“友情链接”页面</span></span><br></pre></td></tr></table></figure><p>打开 <code>Blogroot\source\link\index.md</code>， 在头部加上 <code>type</code> 属性</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: 友情链接</span><br><span class="line"><span class="built_in">date</span>: 2022-09-14 22:30:33</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;link&quot;</span></span><br></pre></td></tr></table></figure><p>友情链接添加，采用本地生成方式。在 <code>Blogroot\source\_data</code>（如果没有_data，则创建一个）下创建一个文件 <code>link.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">那些人，那些事</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/zh-tw/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">快速、简单且强大的网誌框架</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">网站</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">值得推荐的网站</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Youtube</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.youtube.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">视频网站</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Weibo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.weibo.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">中国最大社交分享平台</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Twitter</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://twitter.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">社交分享平台</span></span><br></pre></td></tr></table></figure><p><em>注：<code>class_name</code> 和 <code>class_desc</code> 支持html格式书写，如不需要，也可以留空。</em></p><p><em>注：由 2.2.0 起，友情链接界面可以由用户自己自定义，只需要在友情链接的md档设置就行，以普通的Markdown格式书写。</em></p><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>本博客主题使用 <code>Butterfly</code>，可直接参照 <a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly主题官方文档</a> 进行主题配置。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>第一次进行博客搭建，也遇到了与多问题，例如框架选择、主题配置等等。</p><p>起初是准备使用 <code>Halo</code> 框架进行搭建的，但那个框架需要服务器，只能放弃该方案，转而选择了 <code>Hexo</code> 框架。在搭建的过程中，参考着大佬们的使用经验，一步步将博客搭建起来并修改样式，渐渐发现该框架其实还是挺容易上手的（中途重搭好几次~）。</p><p>博客成功搭建起来，但之后的任务还是挺多的，像修改零碎样式、添加其他功能、整理之前的学习笔记等等，任重而道远！</p><p>最后，感谢 <a href="https://butterfly.js.org/">Butterfly</a> 及 <a href="https://akilar.top/">Akilar</a>！两位大佬的文章在我搭建博客的过程中解决了很多的困难。下面附上参考的文章：</p><blockquote><ul><li>Hexo搭建：<a href="https://akilar.top/posts/6ef63e2d/">https://akilar.top/posts/6ef63e2d/</a></li><li>Butterfly主题配置：<a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo初体验</title>
      <link href="/2022/09/14/hexo%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2022/09/14/hexo%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>2022.09.14，使用Hexo进行博客的搭建。</p><p>在官方文档的指导下，成功搭建出自己的第一个博客。之后便开始着手进行页面修改，在这一步中，使用大佬们的主题，真的是太方便了，同时也明白了自己还有很多地方需要学，之后还需要对页面进行再次修改，添加其他功能。</p><p>感谢大佬们把经验分享出来，解决了我在使用过程中的很多问题。</p><p>使用过程主要参考网址：</p><blockquote><p>hexo官方文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><p>hexo博客搭建指导：<a href="https://akilar.top/posts/6ef63e2d/">https://akilar.top/posts/6ef63e2d/</a></p><p>Butterfly主题使用文档：<a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生活记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/14/hello-world/"/>
      <url>/2022/09/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
